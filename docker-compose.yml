version: '3.8'
services:
  booktrader:
    build:
      context: ./booktrader
    ports:
      - 8000:8000
    volumes:
      - static:/static
    environment:
      # Database settings for connection pooling
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DB_CONN_MAX_AGE=600
      # Set to 'production' for production-level connection pooling
      - DJANGO_ENV=development
    depends_on:
      db:
        condition: service_healthy
    # Health check to monitor Django application
    # Benefits: Automatic restart on failure, better orchestration
    healthcheck:
      test: [ "CMD", "python", "manage.py", "check", "--database", "default" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # entrypoint and command are now handled by the entrypoint.sh script
    # entrypoint sets the entrypoint for the container to the python3.12 executable
    # entrypoint: /usr/local/bin/python3.12
    # entrypoint: /bin/sh -c
    # # command runs as arguments to the entrypoint
    # command: "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
  nginx:
    build:
      context: ./nginx
    volumes:
      - static:/static
    ports:
      - "80:80"
    depends_on:
      - booktrader
      - db
  db:
    image: postgres:17-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
    # Health check to monitor PostgreSQL database
    # Benefits: Ensures database is ready before starting dependent services
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  # tests:
  #   build: .
  #   volumes:
  #     - .:/workspace/
  #   entrypoint: /usr/local/bin/python3.12
  #   command: manage.py test
volumes:
  postgres_data:
  static:


