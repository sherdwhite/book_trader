"""
Django settings for booktrader project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    "django-insecure-ea&fc43ud#^7e_^&p9=@y7(_6fm-a$_)lu!^hil@^d(g7k2u3m",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "True").lower() in ("true", "1", "yes")

# Parse ALLOWED_HOSTS from environment variable
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "*").split(",")
if ALLOWED_HOSTS == [""]:
    ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    # django-otp apps
    "django_otp",
    "django_otp.plugins.otp_email",
    # Local apps
    "api.apps.ApiConfig",
    "books.apps.BooksConfig",
    "users.apps.UsersConfig",
    "auctions.apps.AuctionsConfig",
    "trades.apps.TradesConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.static",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Override with PostgreSQL if available
if os.environ.get("DB_HOST"):
    try:
        import psycopg

        # Quick test
        conn = psycopg.connect(
            host=os.environ.get("DB_HOST", "db"),
            dbname=os.environ.get("DB_NAME", "postgres"),
            user=os.environ.get("DB_USER", "postgres"),
            password=os.environ.get("DB_PASSWORD", "dbpassword"),
            connect_timeout=2,
        )
        conn.close()

        # If we get here, PostgreSQL is working
        # Environment-specific connection pooling settings
        if os.environ.get("DJANGO_ENV") == "production":
            # Production settings (larger pool for production workloads)
            conn_max_age = int(os.environ.get("DB_CONN_MAX_AGE", "600"))
            connect_timeout = int(os.environ.get("DB_CONNECT_TIMEOUT", "30"))
        else:
            # Development settings (smaller pool for local development)
            conn_max_age = int(os.environ.get("DB_CONN_MAX_AGE", "300"))
            connect_timeout = int(os.environ.get("DB_CONNECT_TIMEOUT", "10"))

        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": os.environ.get("DB_NAME", "postgres"),
                "USER": os.environ.get("DB_USER", "postgres"),
                "PASSWORD": os.environ.get("DB_PASSWORD", "dbpassword"),
                "HOST": os.environ.get("DB_HOST", "db"),
                "PORT": os.environ.get("DB_PORT", "5432"),
                "OPTIONS": {
                    "connect_timeout": connect_timeout,
                },
                # Connection pooling
                "CONN_MAX_AGE": conn_max_age,
                "CONN_HEALTH_CHECKS": True,
            }
        }

    except:
        pass  # Keep SQLite


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Static files collection directory (required for collectstatic)
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# django-otp settings
OTP_EMAIL_SENDER = os.environ.get("OTP_EMAIL_SENDER", "noreply@booktrader.com")
OTP_EMAIL_TOKEN_VALIDITY = int(
    os.environ.get("OTP_EMAIL_TOKEN_VALIDITY", "300")
)  # 5 minutes
OTP_EMAIL_THROTTLE_FACTOR = int(os.environ.get("OTP_EMAIL_THROTTLE_FACTOR", "1"))

# Email settings for OTP (using console backend for development)
if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    # Production email settings - configure these environment variables
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = os.environ.get("EMAIL_HOST")
    EMAIL_PORT = int(os.environ.get("EMAIL_PORT", "587"))
    EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "True").lower() in (
        "true",
        "1",
        "yes",
    )
    EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
    DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", OTP_EMAIL_SENDER)
